/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cargarbasedatos;

import java.awt.Color;
import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.DefaultCaret;

/**
 * Aplicación con la que se puede realizar la conexión a una base de datos en un
 * gestor determinado y realizar la carga de datos o estructura para dicha base
 * de datos mediante el uso de un archivo SQL que es seleccionado por el usuario
 * mediante un JFileChooser.
 *
 * @author Antonio Alfredo Ramirez Ramirez
 * @since 11/10/2015
 * @version 1.1.0
 */
public class PantallaCargaArchivo extends javax.swing.JFrame {

    private static Connection conexion = null;
    private Statement st = null;

    /**
     * Creates new form PantallaCargaArchivo
     */
    public PantallaCargaArchivo() {
        initComponents();
        //Configuramos el area de texto
        txtTextoArchivo.setEnabled(false);
        txtTextoArchivo.setDisabledTextColor(Color.DARK_GRAY);
        txtTextoArchivo.setLineWrap(true);
        DefaultCaret caret = (DefaultCaret) txtTextoArchivo.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitulo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtTextoArchivo = new javax.swing.JTextArea();
        lblTextoArchivo = new javax.swing.JLabel();
        btnAbrir = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnConectar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitulo.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblTitulo.setText("Pantalla para cargar archivos SQL para una base de datos");

        txtTextoArchivo.setColumns(20);
        txtTextoArchivo.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        txtTextoArchivo.setRows(5);
        jScrollPane1.setViewportView(txtTextoArchivo);

        lblTextoArchivo.setText("Texto del archivo");

        btnAbrir.setText("Abrir y cargar");
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnConectar.setText("Conectar a gestor BD");
        btnConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConectarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTextoArchivo)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 736, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(208, 208, 208)
                        .addComponent(btnConectar)
                        .addGap(29, 29, 29)
                        .addComponent(btnAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lblTitulo)
                .addGap(167, 167, 167))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblTextoArchivo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAbrir)
                    .addComponent(btnSalir)
                    .addComponent(btnConectar))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
        // TODO add your handling code here:
        BufferedReader bufer = null;
        try {
            //Usamos el FileChooser para seleccionar el archivo a cargar
            JFileChooser archivo = new JFileChooser();
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos SQL", "sql");
            archivo.setFileFilter(filtro);
            archivo.showOpenDialog(this);
            txtTextoArchivo.setText("");
            //abrimos el archivo seleccionado
            File abreArchivo = archivo.getSelectedFile();
            StringBuffer sb = new StringBuffer();
            //recorremos el archivo para mostrarlo en el area de texto
            if (abreArchivo != null) {
                bufer = new BufferedReader(new FileReader(abreArchivo));
                String linea = new String();
                int num = 0;
                while ((linea = bufer.readLine()) != null) {
                    txtTextoArchivo.append(num + "\t" + linea + "\n");
                    //si la linea no esta vacia ni es un comentario de SQL
                    if (!linea.isEmpty()) {
                        if (linea.charAt(0) != '-') {
                            sb.append(linea); //guardamos la linea
//                            sb.append(" "); //dejamos un espacio por seguridad
                        }
                    }
                    num++;
                }
                bufer.close();
                String[] sentencias = sb.toString().split(";");
                for (String sentencia : sentencias) {
//                    System.out.println("Sentencia = " + sentencia);
                    if (sentencia.charAt(0) != ' ') {
                        st.execute(sentencia);
                        System.out.println("Sentencia ejecutada = " + sentencia);
                    }
                }
                JOptionPane.showMessageDialog(rootPane, "Archivo SQL ejecutado correctamente.");
            }
        } catch (HeadlessException | IOException e) {
            JOptionPane.showMessageDialog(rootPane, "No se pudieron leer los datos del archivo.\n" + e.getMessage());
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(rootPane, "No se pudo conectar a la base de datos.\n" + e.getMessage());
        }
    }//GEN-LAST:event_btnAbrirActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
        int valor = JOptionPane.showConfirmDialog(this, "¿Esta seguro de salir?", "advertencia", JOptionPane.YES_NO_OPTION);
        if (valor == JOptionPane.YES_OPTION) {
            try {
                JOptionPane.showMessageDialog(this, "¡¡Hasta Luego!!");
                conexion.close();
                System.exit(0);
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(rootPane, "No se pudo conectar a la base de datos.\n" + e.getMessage());
            }
        }
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConectarActionPerformed
        try {
            //abrimos la conexion a la base de datos
            conexion = getConexionBD();
            st = conexion.createStatement();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(rootPane, "No se pudo conectar a la base de datos.\n" + e.getMessage());
        }
    }//GEN-LAST:event_btnConectarActionPerformed

    /**
     * Metodo para realizar la conexión a la base de datos mediante el envio de
     * los parametros necesarios para realizar su conexión, dichos parametros
     * son pedidos al usuario.
     *
     * @return
     */
    private Connection getConexionBD() {
        Connection conn = null;
        //obtenemos los datos de la base de datos del usuario
        String host = JOptionPane.showInputDialog(rootPane, "Introduzca la dirección IP del gestor de base de datos\nSi la base es local introduzca 'localhost'");
        String base = JOptionPane.showInputDialog(rootPane, "Introduzca el nombre de la base de datos que se va a utilizar.");
        String user = JOptionPane.showInputDialog(rootPane, "Introduzca el usuario con el que se ingresa al gestor de base de datos.");
        String pass = JOptionPane.showInputDialog(rootPane, "Introduzca el password correspondiente al usuario usado \npara ingresar al gestor de base de datos.");

        //preparamos la sentencia a usar para la conexión a la base de datos
        String servidor = "jdbc:mysql://" + host + "/" + base;
        try {
            //realizamos la conexion a la base de datos especificada en el archivo config.xml
            Class.forName("com.mysql.jdbc.Driver");
            conn = DriverManager.getConnection(servidor, user, pass);
            JOptionPane.showMessageDialog(rootPane, "Conexión al gestor de base de datos exitosa.");
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(null, "Conexion no realizada\n" + ex.getMessage());
        }
        return conn;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PantallaCargaArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PantallaCargaArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PantallaCargaArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PantallaCargaArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PantallaCargaArchivo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrir;
    private javax.swing.JButton btnConectar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTextoArchivo;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTextArea txtTextoArchivo;
    // End of variables declaration//GEN-END:variables
}
